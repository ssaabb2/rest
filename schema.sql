-- ========= SCHEMA: Restaurant App on Supabase (SAFE PACK, FINAL++) =========

-- Extensions
create extension if not exists "uuid-ossp";
create extension if not exists "pgcrypto";

-- ============ Tables ============
create table if not exists public.categories(
  id           text primary key,
  name         text not null,
  sort         int  default 0,
  created_at   timestamptz default now()
);
create unique index if not exists categories_name_unique
on public.categories ((lower(name)));

create table if not exists public.menu_items(
  id            uuid primary key default gen_random_uuid(),
  name          text not null,
  "desc"        text,
  price         numeric(12,2) not null default 0,
  img           text,
  cat_id        text references public.categories(id) on delete set null,
  available     boolean not null default true,
  fresh         boolean not null default false,
  rating_avg    numeric(4,2) not null default 0,
  rating_count  int not null default 0,
  created_at    timestamptz default now()
);

create table if not exists public.orders(
  id           bigint generated by default as identity primary key,
  order_name   text,
  phone        text,
  table_no     text,
  notes        text,
  total        numeric(12,2) not null default 0,
  created_at   timestamptz default now()
);

-- حفظ حالة الطلب في القاعدة + حقول الخصم/الإضافات
alter table public.orders
  add column if not exists status text not null default 'new';

-- ✅ الفحص الصحيح لوجود قيد CHECK عبر information_schema.table_constraints
do $$
begin
  if not exists (
    select 1
    from information_schema.table_constraints
    where table_schema = 'public'
      and table_name   = 'orders'
      and constraint_name = 'orders_status_check'
  ) then
    alter table public.orders
      add constraint orders_status_check
      check (status in ('new','received','preparing','delivered','canceled'));
  end if;
end$$;

alter table public.orders
  add column if not exists discount_pct numeric(5,2)  default 0,
  add column if not exists discount     numeric(12,2) default 0,
  add column if not exists additions    jsonb          default '[]'::jsonb;

create table if not exists public.order_items(
  id         bigint generated by default as identity primary key,
  order_id   bigint not null references public.orders(id) on delete cascade,
  item_id    uuid references public.menu_items(id) on delete set null,
  name       text not null,
  price      numeric(12,2) not null default 0,
  qty        int not null default 1
);

create table if not exists public.ratings(
  id         bigint generated by default as identity primary key,
  item_id    uuid not null references public.menu_items(id) on delete cascade,
  stars      int  not null check (stars between 1 and 5),
  created_at timestamptz default now()
);

create table if not exists public.reservations(
  id                 bigint generated by default as identity primary key,
  name               text not null,
  phone              text,
  date               timestamptz not null,
  people             int not null default 1,
  kind               text not null default 'table', -- table / event
  table_no           text,
  duration_minutes   int  not null default 90,
  notes              text,
  created_at         timestamptz default now()
);

-- حالة الحجز لتوافق صفحات الأدمن
alter table public.reservations
  add column if not exists status text not null default 'new';

do $$
begin
  if not exists (
    select 1 from information_schema.table_constraints
    where table_schema='public' and table_name='reservations' and constraint_name='reservations_status_check'
  ) then
    alter table public.reservations
      add constraint reservations_status_check
      check (status in ('new','confirmed','seated','done','canceled'));
  end if;
end$$;

create table if not exists public.admins(
  user_id uuid primary key -- references auth.users(id)
);

-- Seed initial admin (idempotent) — قبل تفعيل RLS
do $$
begin
  if not exists (select 1 from public.admins where user_id = '484f9433-bbcd-4fa2-8a8e-5a71b463f7cd'::uuid) then
    insert into public.admins (user_id) values ('484f9433-bbcd-4fa2-8a8e-5a71b463f7cd'::uuid);
  end if;
end$$;

-- ============ RLS ============
alter table public.categories    enable row level security;
alter table public.menu_items    enable row level security;
alter table public.orders        enable row level security;
alter table public.order_items   enable row level security;
alter table public.ratings       enable row level security;
alter table public.reservations  enable row level security;
alter table public.admins        enable row level security;

-- Helper: is_admin(uid)
create or replace function public.is_admin(u uuid)
returns boolean
language plpgsql
security definer
set search_path = public
as $$
begin
  return exists(select 1 from public.admins a where a.user_id = u);
end;
$$;
grant execute on function public.is_admin(uuid) to authenticated;

-- ============ Policies ============

-- Categories: public read
drop policy if exists "read categories" on public.categories;
create policy "read categories" on public.categories
for select using (true);

-- Menu: public read
drop policy if exists "read menu" on public.menu_items;
create policy "read menu" on public.menu_items
for select using (true);

-- Admins manage categories / menu_items  -> لأي مستخدم مسجّل
drop policy if exists "admins manage categories" on public.categories;
drop policy if exists "auth manage categories"   on public.categories;
create policy "auth manage categories" on public.categories
for all to authenticated
using (true)
with check (true);

drop policy if exists "admins manage menu" on public.menu_items;
drop policy if exists "auth manage menu"   on public.menu_items;
create policy "auth manage menu" on public.menu_items
for all to authenticated
using (true)
with check (true);

-- Orders: public insert
drop policy if exists "public insert orders" on public.orders;
create policy "public insert orders" on public.orders
for insert to public
with check (true);

-- Orders: لأي authenticated
drop policy if exists "admins read orders"   on public.orders;
drop policy if exists "admins update orders" on public.orders;
drop policy if exists "admins delete orders" on public.orders;
drop policy if exists "auth read orders"     on public.orders;
drop policy if exists "auth update orders"   on public.orders;
drop policy if exists "auth delete orders"   on public.orders;

create policy "auth read orders" on public.orders
for select to authenticated
using (true);

create policy "auth update orders" on public.orders
for update to authenticated
using (true)
with check (true);

create policy "auth delete orders" on public.orders
for delete to authenticated
using (true);

-- Order Items: public insert
drop policy if exists "public insert order_items" on public.order_items;
create policy "public insert order_items" on public.order_items
for insert to public
with check (true);

-- Order Items: لأي authenticated
drop policy if exists "admins read order_items"   on public.order_items;
drop policy if exists "admins update order_items" on public.order_items;
drop policy if exists "admins delete order_items" on public.order_items;
drop policy if exists "auth read order_items"     on public.order_items;
drop policy if exists "auth update order_items"   on public.order_items;
drop policy if exists "auth delete order_items"   on public.order_items;

create policy "auth read order_items" on public.order_items
for select to authenticated
using (true);

create policy "auth update order_items" on public.order_items
for update to authenticated
using (true)
with check (true);

create policy "auth delete order_items" on public.order_items
for delete to authenticated
using (true);

-- Ratings: public insert + public read
drop policy if exists "public insert ratings" on public.ratings;
create policy "public insert ratings" on public.ratings
for insert to public
with check (true);

drop policy if exists "public read ratings" on public.ratings;
create policy "public read ratings" on public.ratings
for select using (true);

-- Reservations: public insert
drop policy if exists "public insert reservations" on public.reservations;
create policy "public insert reservations" on public.reservations
for insert to public
with check (true);

-- Reservations: لأي authenticated
drop policy if exists "admins read reservations"   on public.reservations;
drop policy if exists "admins update reservations" on public.reservations;
drop policy if exists "admins delete reservations" on public.reservations;
drop policy if exists "auth read reservations"     on public.reservations;
drop policy if exists "auth update reservations"   on public.reservations;
drop policy if exists "auth delete reservations"   on public.reservations;

create policy "auth read reservations" on public.reservations
for select to authenticated
using (true);

create policy "auth update reservations" on public.reservations
for update to authenticated
using (true)
with check (true);

create policy "auth delete reservations" on public.reservations
for delete to authenticated
using (true);

-- Admins table policies
drop policy if exists "self read admin row"  on public.admins;
drop policy if exists "admins manage admins" on public.admins;

create policy "self read admin row" on public.admins
for select to authenticated
using (user_id = auth.uid());

create policy "admins manage admins" on public.admins
for all to authenticated
using (public.is_admin(auth.uid()))
with check (public.is_admin(auth.uid()));

-- ============ Rating trigger ============
create or replace function public.bump_menu_rating()
returns trigger language plpgsql as $$
begin
  update public.menu_items mi
  set rating_avg =
        ((mi.rating_avg * mi.rating_count) + new.stars)::numeric
        / (mi.rating_count + 1),
      rating_count = mi.rating_count + 1
  where mi.id = new.item_id;
  return new;
end;
$$;

drop trigger if exists trg_bump_menu_rating on public.ratings;
create trigger trg_bump_menu_rating
after insert on public.ratings
for each row execute function public.bump_menu_rating();

-- ============ Helpful Indexes ============
create index if not exists idx_menu_items_cat   on public.menu_items(cat_id);
create index if not exists idx_order_items_oid  on public.order_items(order_id);
create index if not exists idx_ratings_item     on public.ratings(item_id);
create index if not exists idx_reservations_dt  on public.reservations(date);

-- فهرس مساعد للتبويب حسب الحالة + التاريخ
create index if not exists idx_reservations_status_date
  on public.reservations(status, date);

-- ====== PATCHES بإضافة سياسات مشروطة (إن لم توجد) ======
-- السماح الصريح لـ anon بالإدراج (لا يغيّر السلوك إن وُجدت سياسة public)
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='orders' and policyname='anon insert orders'
  ) then
    create policy "anon insert orders" on public.orders
    for insert to anon with check (true);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='order_items' and policyname='anon insert order_items'
  ) then
    create policy "anon insert order_items" on public.order_items
    for insert to anon with check (true);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='ratings' and policyname='anon insert ratings'
  ) then
    create policy "anon insert ratings" on public.ratings
    for insert to anon with check (true);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='reservations' and policyname='anon insert reservations'
  ) then
    create policy "anon insert reservations" on public.reservations
    for insert to anon with check (true);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='categories' and policyname='auth read categories'
  ) then
    create policy "auth read categories" on public.categories
    for select to authenticated using (true);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='menu_items' and policyname='auth read menu'
  ) then
    create policy "auth read menu" on public.menu_items
    for select to authenticated using (true);
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='ratings' and policyname='auth read ratings'
  ) then
    create policy "auth read ratings" on public.ratings
    for select to authenticated using (true);
  end if;
end$$;

-- ============ RPC: create_order_with_items (آمن، يتجاوز حاجة select للزائر) ============
create or replace function public.create_order_with_items(
  _order_name text,
  _phone      text,
  _table_no   text,
  _notes      text,
  _items      jsonb
) returns bigint
language plpgsql
security definer
set search_path = public
as $$
declare
  _order_id bigint;
begin
  -- منع إنشاء طلب بسلة فارغة
  if _items is null or jsonb_typeof(_items) <> 'array' or jsonb_array_length(_items) = 0 then
    raise exception 'EMPTY_CART';
  end if;

  -- إنشاء الطلب وحساب الإجمالي داخل القاعدة
  insert into public.orders(order_name, phone, table_no, notes, total)
  values (
    coalesce(_order_name,''), coalesce(_phone,''), coalesce(_table_no,''), coalesce(_notes,''),
    coalesce((
      select sum( greatest(coalesce((it->>'price')::numeric,0),0)
                  * greatest(coalesce((it->>'qty')::int,1),1) )
      from jsonb_array_elements(_items) it
    ), 0)
  )
  returning id into _order_id;

  -- عناصر الطلب
  insert into public.order_items(order_id, item_id, name, price, qty)
  select _order_id,
         nullif(it->>'id','')::uuid,
         left(coalesce(it->>'name',''), 200),
         greatest(coalesce((it->>'price')::numeric,0), 0),
         greatest(coalesce((it->>'qty')::int,1), 1)
  from jsonb_array_elements(_items) it;

  return _order_id;
end $$;

-- السماح باستدعاء الدالة من الزائر والمصادَق
grant execute on function public.create_order_with_items(text,text,text,text,jsonb) to anon, authenticated;

-- ============ Grants (اختياري/آمن) ============
grant usage on schema public to anon, authenticated;
grant select on all tables in schema public to anon, authenticated;
grant insert on all tables in schema public to anon, authenticated;
grant update on all tables in schema public to authenticated;
grant delete on all tables in schema public to authenticated;

alter default privileges in schema public
grant select on tables to anon, authenticated;
alter default privileges in schema public
grant insert on tables to anon, authenticated;
alter default privileges in schema public
grant update, delete on tables to authenticated;

-- ========= END =========
-- السماح بقراءة الأقسام لأي زائر
create policy "anon read categories"
on public.categories for select
to anon using (true);

-- السماح بقراءة أصناف المنيو بشرط أن تكون متاحة
create policy "anon read menu"
on public.menu_items for select
to anon using (available = true);

-- (اختياري) السماح بقراءة التقييمات للزائر
create policy "anon read ratings"
on public.ratings for select
to anon using (true);
